#include"Epoll.h"

//Epoll类
Epoll::Epoll()
{
  if((epollfd_=epoll_create(1))==-1) //创建epoll句柄(红黑树)
    {
      printf("epoll_create() failed(%d).\n",errno);exit(-1);
    }
}

Epoll::~Epoll()//关闭epollfd
{
  close(epollfd_);
}

//把channel添加/更新到红黑树上，channel中有fd，也有需要监视的事件
void Epoll::updatechannel(Channel *ch)    
{
  epoll_event ev;   //声明事件的结构体
  ev.data.ptr=ch;
  ev.events=ch->events();
  
  if(ch->inpoll())    //如果channel已经在红黑树上
  {
    if(epoll_ctl(epollfd_,EPOLL_CTL_MOD,ch->fd(),&ev)==-1)
    {
      perror("epoll_ctl()failed.\n");exit(-1);
    }
  }
  else         //如果channel不在树上
  {           
     if(epoll_ctl(epollfd_,EPOLL_CTL_ADD,ch->fd(),&ev)==-1)
     {
      perror("epoll_ctl()failed.\n");exit(-1);
     }
     ch->setinepoll(true);  //把channel的inepoll_成员设置为true
  }
}

//从红黑树上删除channel
void Epoll::removechannel(Channel *ch)
{
  if(ch->inpoll())    //如果channel已经在树上了
  {
    printf("removechannel()\n");
    if(epoll_ctl(epollfd_,EPOLL_CTL_DEL,ch->fd(),0)==-1)
    {
      perror("epoll_ctl() failed.\n"); exit(-1);
    }
  }
}


std::vector<Channel*>Epoll::loop(int timeout)    //运行epoll_wait()，等待事件的发生，已发生的事件用vector容器返回
{
 std::vector<Channel*>channels; //存放epoll_wait()返回的事件
  
  bzero(events_,sizeof(events_));
  int infds=epoll_wait(epollfd_,events_,MaxEvents,timeout); //等待监视的fd有事件发生，该函数返回需要处理的事件数目
  
  //返回失败
  if(infds<0)
  {
    perror("epoll_wait()failed");exit(-1);
  }
  
  //超时
  if(infds==0)
  {
    //如果epoll_wait()超时，表示系统很空闲，返回的channels将为空
    printf("epoll_wait() timeout.\n");
    return channels;
  }
  
  //如果infds>0, 表示有事件发生的fd的数量
  for(int ii=0;ii<infds;ii++)
  {
    //evs.push_back(events_[ii]);  //遍历epoll返回的数组events
    Channel *ch=(Channel*)events_[ii].data.ptr;
    ch->setrevents(events_[ii].events);
    channels.push_back(ch);
  }
  return channels;  

}
